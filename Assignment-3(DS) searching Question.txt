           Assignment-3(DS)Searching(Question)
	****************************************
	
Question.1:

Program code-
#include<stdio.h>
int frequency(int a[],int n,int x)
{
  int i,flag=1,c=0;
  for(i=0;i<n;i++)
  {
    if(a[i]==x)
    {
    flag=0;
    c++;
    }
  }
   return c;
 if(flag==1)
  return -1;
}
 int main()
 {
     int a[100],n,i,t,p,s;
     printf("\nEnter the size of Array:");
     scanf("%d",&n);
     printf("\nEnter the array element:");
     for(i=0;i<n;i++)
     {
         scanf("%d",&a[i]);
     }
     t=frequency(a,n,2);
     p=frequency(a,n,3);
     s=frequency(a,n,5);
      if(t==-1)
      {
            printf("\nFrequency not found because this element not in array");
      }
       else
       {
          printf("\nFrequency of 2 is %d",t);
          printf("\nFrequency of 3 is %d",p);
          printf("\nFrequency of 5 is %d",s);
       }
      return 0;
}
INPUT-
Enter the size of Array:51
Enter the array element:1 2 1 2 4  5 3 4 5 6 7 8 7 6 5 4 3 2 3 4 5 6 5 3 2 3 4 5 6 7 8 6 5 4 3 2 2 3 3 4 5 3 2 1 2 3 4 5 6 7 8
OUTPUT-
Frequency of 2 is 8
Frequency of 3 is 10
Frequency of 5 is 9

COMPLEXITY-O(n).

Question.2:

Program Code-
#include<stdio.h>
 int bin_search(int a[],int n,int x)
{
  int m,l=0,u=n-1;
  while(l<=u)
  {
    m=(l+u)/2;
    if(x==a[m])
    {
    return m;
    }
    else if(x>a[m])
        l=m+1;
    else
        u=m-1;
  }
  return -1;
}
int jump_search(int a[],int n,int x)
{
    int i=0,j,k;
    j=sqrt(n);
    while(a[j]<x&&j<n)
          {
            i=j;
            j+=sqrt(n);
            if(i>n)
                {
                    return -1;
                }
          }
      for(k=i;k<=j;k++)
      {
          if(a[k]==x)
          {
              return k;
          }
      }
      return -1;
}
int main()
{
 int a[100],n,i,x;
 printf("\nEnter the size of Array:");
 scanf("%d",&n);
 printf("\nEnter the array in sorted order:");
 for(i=0;i<n;i++)
 {
 scanf("%d",&a[i]);
 }
 printf("\nEnter the element to search:");
 scanf("%d",&x);
 int t,p;
 t=bin_search(a,n,x);
 p=jump_search(a,n,x);
 if(t==p&&t!=-1&&p!=-1)
        printf("Binary search and Jump search result is equal at index %d",t);
  else
        printf("Element not found");
}
INPUT-
Enter the size of Array:22
Enter the array in sorted order:1 2 3 4 5 6 7 8 9 10 13 15 18 19 23 25 27 31 35 42 47 49
Enter the element to search:13
OUTPUT-
Binary search and Jump search result is equal at index 10
COMPLEXITY-O{log(n)+n2}
Question.3:
Program code-
#include<stdio.h>
int bin_search(int a[],int l ,int r,int x)
{
    if(l>r)
     return -1;
    int d=l+(r)/2;
    if(x==a[d])
        return d;
    else if(x<a[d])
        return bin_search(a,l,d-1,x);
    else
        return bin_search(a,d+1,r,x);
}
int exp_search(int a[],int n,int x)
{
    int i=1;
   while((i<n) && a[i]<x)
        i*=2;
   return bin_search(a,i/2,i,x);
}
int c=1;
int inte_search(int a[],int n, int x)
{
    int l=0,h=(n-1),p;
    while(c++ && l<=h && x>=a[l]&&x<=a[h])
    {
        p=1+(((double)(h-1)/(a[h]-a[l]))*(x-a[l]));

        if(c++ && a[p] == x)
            return p;
        if(c++ && a[p]<x)
            l=p+1;
        else
        h = p-1;
    }
   return -1;
}
int main()
{
    int a[50],n,x,i,t,p,opt;
    printf("\nEnter Array size:");
    scanf("%d",&n);
    printf("\nEnter Array element in sorted order:");
    for(i=0;i<n;i++)
    {
        scanf("%d",&a[i]);
    }
    printf("\nEnter element to search:");
    scanf("%d",&x);
    printf("\n1 Exponential Search\n2 Interpolation Search\n");
    printf("Enter your choose:");
    scanf("%d",&opt);
    t=exp_search(a,n,x);
    p=inte_search(a,n,x);
    switch(opt)
    {
    case 1:
        {
            if(t==-1)
                printf("\nElement not found");
            else
                printf("\nElement found at index %d in exponential search",t);
                break;
        }
    case 2:
        {
            if(p==-1)
            printf("\nElement not found");
            else
            printf("\nElement found at index %d in interpolation search",p);
            break;
        }
        break;

    }
    return 0;
}
INPUT-
Enter Array size:8
Enter Array element in sorted order:1 2 34 54 56 78 79 99
Enter element to search:56
1 Exponential Search
2 Interpolation Search
Enter your choose:2
OUTPUT-
Element found at index 4 in interpolation search


Question.4:

Program code-

#include<stdio.h>
int main()
{
    int size,i,j;
    printf("Enter the size of the array\n");
    scanf("%d",&size);
    int a[size];
    printf("Enter the array element\n");
    for(i=0;i<size;i++)
    scanf("%d",&a[i]);
    for(i=0;i<size/2;i++)
    {
           a[i]=a[i]+a[size-1-i];
         a[size-1-i]=a[i]-a[size-1-i];
         a[i]=a[i]-a[size-1-i];
    }
    printf("\nPrint the swap array:");
    for(i=0;i<size;i++)
    {
       printf("\t%d",a[i]);   
    }
    return 0;
}
INPUT-
Enter the size of the array
5
Enter the array element
4 3 5 2 1
OUTPUT-
Print the swap array:   1       2       5       3       4

Question.6:

Program code-
#include<stdio.h>
int lin_search(int a[],int n,int x)
{
    int flag=1,i;
    for(i=0;i<n;i++)
    {
        if(a[i]==x)
        {
            flag=0;
            return i;
        }
    }
    if(flag==1)
      return -1;
}
 int bin_search(int a[],int n,int x)
{
  int m,l=0,u=n-1;
  while(l<=u)
  {
    m=(l+u)/2;
    if(x==a[m])
    {
    return m;
    }
    else if(x>a[m])
        l=m+1;
    else
        u=m-1;
  }
  return -1;
}
int jump_search(int a[],int n,int x)
{
    int i=0,j,k;
    j=sqrt(n);
    while(a[j]<x&&j<n)
          {

              i=j;
              j+=sqrt(n);
              if(i>n)
                {
                    return -1;
                }
          }
      for(k=i;k<=j;k++)
      {
          if(a[k]==x)
          {
              return k;
          }
      }
      return -1;
}
int main()
{
  int a[50],n,i,x;
  printf("\nEnter the size of Array:");
  scanf("%d",&n);
  printf("\nEnter the array in sorted order:");
  for(i=0;i<n;i++)
  {
   scanf("%d",&a[i]);
  }
  printf("Enter element to search:");
  scanf("%d",&x);
  int opt,t;
  printf("Choose your option in searching \n1 Linear Search \n2 Binary Search \n3 Jump Search\n");
  scanf("%d",&opt);
  t=lin_search(a,n,x);
  t=bin_search(a,n,x);
  t=jump_search(a,n,x);
  switch(opt)
  {
  case 1:
    {
      if(t==-1)
      {
          printf("Element is not found in Linear search");
      }
      else
      {
          printf("Element is found at index %d in Linear search",t);
      }
      break;
    }
  case 2:
    {
      if(t==-1)
      {
          printf("Element is not found in Binary search");
      }
      else
      {
          printf("Element is found at index %d in Binary search.",t);
      }
      break;
    }
  case 3:
    {
      if(t==-1)
      {
          printf("Element is not found in jump search");
      }
      else
      {
          printf("Element is found at index %d in jump search.",t);
      }
      break;
    }
    break;
  }
}
INPUT-
Enter the size of Array:22
Enter the array in sorted order:1 2 3 4 5 6 7 8 9 10 13 15 18 19 23 25 27 31 35 42 47 49
Enter element to search:15
Choose your option in searching
1 Linear Search
2 Binary Search
3 Jump Search
3
OUTPUT-
Element is found at index 11 in jump search.
